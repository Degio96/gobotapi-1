// Code AutoGenerated; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	rawTypes "github.com/GoBotApiOfficial/gobotapi/types/raw"
)

// InputMediaVideo Represents a video to be sent.
type InputMediaVideo struct {
	Caption           string             `json:"caption,omitempty"`
	CaptionEntities   []MessageEntity    `json:"caption_entities,omitempty"`
	Duration          int                `json:"duration,omitempty"`
	HasSpoiler        bool               `json:"has_spoiler,omitempty"`
	Height            int                `json:"height,omitempty"`
	Media             rawTypes.InputFile `json:"media,omitempty"`
	ParseMode         string             `json:"parse_mode,omitempty"`
	SupportsStreaming bool               `json:"supports_streaming,omitempty"`
	Thumbnail         rawTypes.InputFile `json:"thumbnail,omitempty"`
	Width             int64              `json:"width,omitempty"`
}

func (entity *InputMediaVideo) Files() map[string]rawTypes.InputFile {
	files := make(map[string]rawTypes.InputFile)
	switch entity.Media.(type) {
	case InputBytes:
		files["video"] = entity.Media
	}
	switch entity.Thumbnail.(type) {
	case InputBytes:
		files["thumbnail"] = entity.Thumbnail
	}
	return files
}

func (entity *InputMediaVideo) SetAttachment(attach string) {
	entity.Media = InputURL(fmt.Sprintf("attach://%s", attach))
}

func (entity *InputMediaVideo) SetAttachmentThumb(_ string) {
}

func (entity InputMediaVideo) MarshalJSON() ([]byte, error) {
	alias := struct {
		Type              string             `json:"type"`
		Media             rawTypes.InputFile `json:"media,omitempty"`
		Thumbnail         rawTypes.InputFile `json:"thumbnail,omitempty"`
		Caption           string             `json:"caption,omitempty"`
		ParseMode         string             `json:"parse_mode,omitempty"`
		CaptionEntities   []MessageEntity    `json:"caption_entities,omitempty"`
		Width             int64              `json:"width,omitempty"`
		Height            int                `json:"height,omitempty"`
		Duration          int                `json:"duration,omitempty"`
		SupportsStreaming bool               `json:"supports_streaming,omitempty"`
		HasSpoiler        bool               `json:"has_spoiler,omitempty"`
	}{
		Type:              "video",
		Media:             entity.Media,
		Thumbnail:         entity.Thumbnail,
		Caption:           entity.Caption,
		ParseMode:         entity.ParseMode,
		CaptionEntities:   entity.CaptionEntities,
		Width:             entity.Width,
		Height:            entity.Height,
		Duration:          entity.Duration,
		SupportsStreaming: entity.SupportsStreaming,
		HasSpoiler:        entity.HasSpoiler,
	}
	return json.Marshal(alias)
}

// Code AutoGenerated; DO NOT EDIT.

package methods

import (
	"encoding/json"
	"fmt"
	"github.com/Squirrel-Network/gobotapi/types"
	rawTypes "github.com/Squirrel-Network/gobotapi/types/raw"
)

// CopyMessage Use this method to copy messages of any kind
// Service messages and invoice messages can't be copied
// A quiz poll can be copied only if the value of the field correct_option_id is known to the bot
// The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message
// Returns the MessageId of the sent message on success.
type CopyMessage struct {
	AllowSendingWithoutReply bool                  `json:"allow_sending_without_reply,omitempty"`
	Caption                  string                `json:"caption,omitempty"`
	CaptionEntities          []types.MessageEntity `json:"caption_entities,omitempty"`
	ChatID                   any                   `json:"chat_id"`
	DisableNotification      bool                  `json:"disable_notification,omitempty"`
	FromChatID               int64                 `json:"from_chat_id"`
	MessageID                int64                 `json:"message_id"`
	ParseMode                string                `json:"parse_mode,omitempty"`
	ProtectContent           bool                  `json:"protect_content,omitempty"`
	ReplyMarkup              any                   `json:"reply_markup,omitempty"`
	ReplyToMessageID         int64                 `json:"reply_to_message_id,omitempty"`
}

func (entity *CopyMessage) ProgressCallable() rawTypes.ProgressCallable {
	return nil
}

func (entity *CopyMessage) Files() map[string]rawTypes.InputFile {
	return map[string]rawTypes.InputFile{}
}

func (entity CopyMessage) MarshalJSON() ([]byte, error) {
	if entity.ReplyMarkup != nil {
		switch entity.ReplyMarkup.(type) {
		case *types.InlineKeyboardMarkup, *types.ReplyKeyboardMarkup, *types.ReplyKeyboardRemove, *types.ForceReply:
			break
		default:
			return nil, fmt.Errorf("reply_markup: unknown type: %T", entity.ReplyMarkup)
		}
	}
	if entity.ChatID != nil {
		switch entity.ChatID.(type) {
		case int, int64, string:
			break
		default:
			return nil, fmt.Errorf("chat_id: unknown type: %T", entity.ChatID)
		}
	}
	type x0 CopyMessage
	return json.Marshal((x0)(entity))
}

func (CopyMessage) MethodName() string {
	return "copyMessage"
}

func (CopyMessage) ParseResult(response []byte) (*rawTypes.Result, error) {
	var x1 struct {
		Result types.MessageId `json:"result"`
	}
	err := json.Unmarshal(response, &x1)
	if err != nil {
		return nil, err
	}
	result := rawTypes.Result{
		Kind:   types.TypeMessageId,
		Result: x1.Result,
	}
	return &result, nil
}

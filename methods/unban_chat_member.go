// Code AutoGenerated; DO NOT EDIT.

package methods

import (
	"encoding/json"
	"fmt"
	"github.com/GoBotApiOfficial/gobotapi/types"
	rawTypes "github.com/GoBotApiOfficial/gobotapi/types/raw"
	"reflect"
)

// UnbanChatMember Use this method to unban a previously banned user in a supergroup or channel
// The user will not return to the group or channel automatically, but will be able to join via link, etc
// The bot must be an administrator for this to work
// By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it
// So if the user is a member of the chat they will also be removed from the chat
// If you don't want this, use the parameter only_if_banned
// Returns True on success.
type UnbanChatMember struct {
	ChatID       any   `json:"chat_id"`
	OnlyIfBanned bool  `json:"only_if_banned,omitempty"`
	UserID       int64 `json:"user_id"`
}

func (entity *UnbanChatMember) ProgressCallable() rawTypes.ProgressCallable {
	return nil
}

func (entity *UnbanChatMember) Files() map[string]rawTypes.InputFile {
	return map[string]rawTypes.InputFile{}
}

func (entity UnbanChatMember) MarshalJSON() ([]byte, error) {
	if !reflect.DeepEqual(entity.ChatID, nil) {
		switch entity.ChatID.(type) {
		case int, int64, string:
			break
		default:
			return nil, fmt.Errorf("chat_id: unknown type: %T", entity.ChatID)
		}
	}
	type x0 UnbanChatMember
	return json.Marshal((x0)(entity))
}

func (UnbanChatMember) MethodName() string {
	return "unbanChatMember"
}

func (UnbanChatMember) ParseResult(response []byte) (*rawTypes.Result, error) {
	var x1 struct {
		Result bool `json:"result"`
	}
	err := json.Unmarshal(response, &x1)
	if err != nil {
		return nil, err
	}
	result := rawTypes.Result{
		Kind:   types.TypeBoolean,
		Result: x1.Result,
	}
	return &result, nil
}

// Code AutoGenerated; DO NOT EDIT.

package methods

import (
	"encoding/json"
	"fmt"
	"gobotapi/types"
	rawTypes "gobotapi/types/raw"
)

// SendSticker Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers
// On success, the sent Message is returned.
type SendSticker struct {
	ChatID              any                       `json:"chat_id"`
	DisableNotification bool                      `json:"disable_notification,omitempty"`
	Emoji               string                    `json:"emoji,omitempty"`
	MessageThreadID     int64                     `json:"message_thread_id,omitempty"`
	ProtectContent      bool                      `json:"protect_content,omitempty"`
	ReplyMarkup         any                       `json:"reply_markup,omitempty"`
	ReplyParameters     *types.ReplyParameters    `json:"reply_parameters,omitempty"`
	Sticker             rawTypes.InputFile        `json:"sticker,omitempty"`
	Progress            rawTypes.ProgressCallable `json:"-"`
}

func (entity *SendSticker) ProgressCallable() rawTypes.ProgressCallable {
	return entity.Progress
}

func (entity *SendSticker) Files() map[string]rawTypes.InputFile {
	files := make(map[string]rawTypes.InputFile)
	switch entity.Sticker.(type) {
	case types.InputBytes:
		files["sticker"] = entity.Sticker
		entity.Sticker = nil
	}
	return files
}

func (entity SendSticker) MarshalJSON() ([]byte, error) {
	if entity.ChatID != nil {
		switch entity.ChatID.(type) {
		case int, int64, string:
			break
		default:
			return nil, fmt.Errorf("chat_id: unknown type: %T", entity.ChatID)
		}
	}
	if entity.ReplyMarkup != nil {
		switch entity.ReplyMarkup.(type) {
		case *types.InlineKeyboardMarkup, *types.ReplyKeyboardMarkup, *types.ReplyKeyboardRemove, *types.ForceReply:
			break
		default:
			return nil, fmt.Errorf("reply_markup: unknown type: %T", entity.ReplyMarkup)
		}
	}
	type x0 SendSticker
	return json.Marshal((x0)(entity))
}

func (SendSticker) MethodName() string {
	return "sendSticker"
}

func (SendSticker) ParseResult(response []byte) (*rawTypes.Result, error) {
	var x1 struct {
		Result types.Message `json:"result"`
	}
	err := json.Unmarshal(response, &x1)
	if err != nil {
		return nil, err
	}
	result := rawTypes.Result{
		Kind:   types.TypeMessage,
		Result: x1.Result,
	}
	return &result, nil
}

// Code AutoGenerated; DO NOT EDIT.

package methods

import (
	"encoding/json"
	"fmt"
	"github.com/GoBotApiOfficial/gobotapi/types"
	rawTypes "github.com/GoBotApiOfficial/gobotapi/types/raw"
)

// EditMessageCaption Use this method to edit captions of messages
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageCaption struct {
	Caption               string                      `json:"caption,omitempty"`
	CaptionEntities       []types.MessageEntity       `json:"caption_entities,omitempty"`
	ChatID                any                         `json:"chat_id,omitempty"`
	InlineMessageID       string                      `json:"inline_message_id,omitempty"`
	MessageID             int64                       `json:"message_id,omitempty"`
	ParseMode             string                      `json:"parse_mode,omitempty"`
	ReplyMarkup           *types.InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	ShowCaptionAboveMedia bool                        `json:"show_caption_above_media,omitempty"`
}

func (entity *EditMessageCaption) ProgressCallable() rawTypes.ProgressCallable {
	return nil
}

func (entity *EditMessageCaption) Files() map[string]rawTypes.InputFile {
	return map[string]rawTypes.InputFile{}
}

func (entity EditMessageCaption) MarshalJSON() ([]byte, error) {
	if entity.ChatID != nil {
		switch entity.ChatID.(type) {
		case int, int64, string:
			break
		default:
			return nil, fmt.Errorf("chat_id: unknown type: %T", entity.ChatID)
		}
	}
	type x0 EditMessageCaption
	return json.Marshal((x0)(entity))
}

func (EditMessageCaption) MethodName() string {
	return "editMessageCaption"
}

func (EditMessageCaption) ParseResult(response []byte) (*rawTypes.Result, error) {
	var x0 struct {
		Result bool `json:"result"`
	}
	_ = json.Unmarshal(response, &x0)
	if x0.Result {
		result := rawTypes.Result{
			Kind:   types.TypeBoolean,
			Result: true,
		}
		return &result, nil
	} else {
		var x1 struct {
			Result types.Message `json:"result"`
		}
		err := json.Unmarshal(response, &x1)
		if err != nil {
			return nil, err
		}
		result := rawTypes.Result{
			Kind:   types.TypeMessage,
			Result: x1.Result,
		}
		return &result, nil
	}
}
